// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  ADMIN
  USER
  CLIENT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String? @db.LongText

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  gender        String?
  age           Int?
  boards        BoardsOnUsers[]
  accounts      Account[]
  sessions      Session[]
  UserRoles     UserRoles[]
  Comments      Comments[]
  ShareKeys     ShareKeys[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id          String          @id @default(cuid())
  name        String          @unique
  description String
  image       String?
  type        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  users       BoardsOnUsers[]
  UserRoles   UserRoles[]
  Comments    Comments[]
  ShareKeys   ShareKeys[]
}

model BoardsOnUsers {
  boardId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([boardId, userId])
}

model UserRoles {
  id        Int      @id @default(autoincrement())
  boardId   String
  role      Role     @default(USER)
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
}

model Comments {
  id Int @id @default(autoincrement())

  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
}

model ShareKeys {
  id Int @id @default(autoincrement())

  code      String   @unique
  Board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expires   DateTime
}
